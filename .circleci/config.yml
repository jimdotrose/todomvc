# CircleCI configuration file for TodoMVC repository
version: 2.1

# Define reusable executors
executors:
  node-executor:
    docker:
      - image: cimg/node:8.17.0
    working_directory: ~/repo

# Define reusable commands
commands:
  restore_npm_cache:
    description: "Restore NPM cache"
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

  save_npm_cache:
    description: "Save NPM cache"
    steps:
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}

# Define jobs
jobs:
  # Checkout and install dependencies
  install:
    executor: node-executor
    steps:
      - checkout
      - restore_npm_cache
      - run:
          name: Set TMPDIR for PhantomJS
          command: |
            echo 'export TMPDIR=/tmp' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install dependencies
          command: |
            # Set TMPDIR to fix PhantomJS installation
            export TMPDIR=/tmp
            
            # Skip PhantomJS binary download
            export PHANTOMJS_SKIP_DOWNLOAD=true
            
            # Remove package-lock.json to avoid version conflicts
            rm -f package-lock.json
            
            # Install with legacy peer deps flag for older packages
            npm install --legacy-peer-deps
      - save_npm_cache
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  # Run linting
  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run linter
          command: |
            if npm run | grep -q "lint"; then
              npm run lint
            else
              echo "No lint script found, skipping..."
            fi

  # Run tests
  test:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run tests
          command: |
            if npm run | grep -q "test"; then
              npm test
            else
              echo "No test script found, skipping..."
            fi
      - run:
          name: Generate test coverage (if available)
          command: |
            if npm run | grep -q "test:coverage"; then
              npm run test:coverage
            elif npm run | grep -q "coverage"; then
              npm run coverage
            fi
          when: always
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
          destination: coverage

  # Build the application
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build application
          command: |
            if npm run | grep -q "build"; then
              npm run build
            else
              echo "No build script found, skipping..."
            fi
      - run:
          name: List build output
          command: |
            if [ -d "dist" ]; then
              ls -la dist/
            elif [ -d "build" ]; then
              ls -la build/
            elif [ -d "public" ]; then
              ls -la public/
            else
              echo "No standard build directory found"
            fi
      - persist_to_workspace:
          root: ~/repo
          paths:
            - dist
            - build
            - public

  # Run E2E tests (if using Cypress or similar)
  e2e-tests:
    docker:
      - image: cypress/browsers:node18.12.0-chrome107
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Start server and run E2E tests
          command: |
            if [ -f "cypress.config.js" ] || [ -f "cypress.json" ]; then
              # Install Cypress binary if needed
              npx cypress install
              
              # Start server in background
              if npm run | grep -q "start"; then
                npm start &
              elif npm run | grep -q "serve"; then
                npm run serve &
              fi
              
              # Wait for server to be ready
              npx wait-on http://localhost:8080 -t 30000 || npx wait-on http://localhost:3000 -t 30000 || npx wait-on http://localhost:8888 -t 30000
              
              # Run Cypress tests
              if npm run | grep -q "e2e"; then
                npm run e2e
              elif npm run | grep -q "cypress:run"; then
                npm run cypress:run
              else
                npx cypress run
              fi
            else
              echo "No Cypress configuration found, skipping E2E tests..."
            fi
      - store_test_results:
          path: cypress/results
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos

  # Security audit
  security-audit:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run security audit
          command: |
            # Skip audit for old Node versions as it's not fully supported
            if [[ $(node -v) =~ ^v8 ]]; then
              echo "Skipping audit for Node 8.x"
            else
              npm audit --audit-level=moderate || true
            fi
      - run:
          name: Check for outdated packages
          command: |
            npm outdated || true

  # Deploy (example - adjust based on your deployment target)
  deploy:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Deploy to hosting service
          command: |
            echo "Add your deployment commands here"
            # Examples:
            # - Deploy to GitHub Pages: npm run deploy
            # - Deploy to Netlify: netlify deploy --prod --dir=dist
            # - Deploy to Vercel: vercel --prod
            # - Deploy to AWS S3: aws s3 sync dist/ s3://your-bucket-name

# Define workflows
workflows:
  version: 2
  
  # Main workflow for all commits
  build-test-deploy:
    jobs:
      - install
      
      - lint:
          requires:
            - install
      
      - test:
          requires:
            - install
      
      - build:
          requires:
            - install
      
      - e2e-tests:
          requires:
            - build
      
      - security-audit:
          requires:
            - install
      
      - deploy:
          requires:
            - lint
            - test
            - build
            - e2e-tests
          filters:
            branches:
              only:
                - main
                - master

  # Nightly security check workflow
  nightly-security-check:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
                - master
    jobs:
      - install
      - security-audit:
          requires:
            - install
